// ==================== TESTE COM ROOT USER ====================

const mysql = require('mysql2/promise');

// Configura√ß√µes com usu√°rio root
const dbConfigRoot = {
    host: '35.184.206.243',
    user: 'root', 
    password: 'SalaLivre2024!',
    database: 'reuni-dep',
    port: 3306,
    connectTimeout: 60000
};

async function testarComRoot() {
    console.log('üîó === TESTE COM USU√ÅRIO ROOT ===\n');
    
    try {
        console.log('üì° Conectando como root...');
        const connection = await mysql.createConnection(dbConfigRoot);
        
        console.log('‚úÖ Conex√£o estabelecida como root!');
        
        // 1. Verificar usu√°rios existentes
        console.log('\n1. üë• Verificando usu√°rios do banco...');
        const [users] = await connection.execute("SELECT user, host FROM mysql.user WHERE user IN ('root', 'app_user')");
        console.log('Usu√°rios encontrados:', users);
        
        // 2. Criar/atualizar usu√°rio app_user se necess√°rio
        console.log('\n2. üîß Configurando usu√°rio app_user...');
        
        try {
            // Tentar criar usu√°rio
            await connection.execute("CREATE USER 'app_user'@'%' IDENTIFIED BY 'SalaLivre2024!'");
            console.log('‚úÖ Usu√°rio app_user criado');
        } catch (error) {
            if (error.code === 'ER_CANNOT_USER') {
                // Usu√°rio j√° existe, atualizar senha
                await connection.execute("ALTER USER 'app_user'@'%' IDENTIFIED BY 'SalaLivre2024!'");
                console.log('‚úÖ Senha do app_user atualizada');
            } else {
                console.log('‚ö†Ô∏è Erro ao criar usu√°rio:', error.message);
            }
        }
        
        // 3. Dar permiss√µes
        console.log('\n3. üîë Configurando permiss√µes...');
        await connection.execute("GRANT ALL PRIVILEGES ON reuni-dep.* TO 'app_user'@'%'");
        await connection.execute("FLUSH PRIVILEGES");
        console.log('‚úÖ Permiss√µes configuradas');
        
        // 4. Verificar tabelas
        console.log('\n4. üìã Verificando tabelas...');
        const [tables] = await connection.execute("SHOW TABLES");
        console.log('üìä Tabelas encontradas:');
        tables.forEach(table => {
            console.log(`- ${Object.values(table)[0]}`);
        });
        
        // 5. Verificar estrutura da tabela bookings se existir
        const bookingsTable = tables.find(t => Object.values(t)[0] === 'bookings');
        if (bookingsTable) {
            console.log('\n5. üèóÔ∏è Estrutura da tabela bookings:');
            const [structure] = await connection.execute("DESCRIBE bookings");
            
            structure.forEach(column => {
                console.log(`- ${column.Field}: ${column.Type} ${column.Null === 'NO' ? '(NOT NULL)' : '(NULLABLE)'}`);
            });
        } else {
            console.log('\n‚ùå Tabela bookings n√£o encontrada. Ser√° necess√°rio cri√°-la.');
        }
        
        await connection.end();
        console.log('\nüéâ Configura√ß√£o conclu√≠da!');
        
    } catch (error) {
        console.error('‚ùå Erro:', error.message);
        
        if (error.code === 'ER_ACCESS_DENIED_ERROR') {
            console.log('\nüîë Problema de autentica√ß√£o com root:');
            console.log('- Verificar se a senha do root est√° correta');
            console.log('- Verificar se o IP est√° autorizado no Google Cloud');
        }
    }
}

// Executar teste
testarComRoot();
