// ==================== CRIAR ESTRUTURA COMPLETA NA NOVA INST√ÇNCIA ====================

const mysql = require('mysql2/promise');

async function criarEstruturaNaNovaInstancia() {
    console.log('üèóÔ∏è  CRIANDO ESTRUTURA COMPLETA NO BANCO reuni-dep');
    console.log('=' .repeat(60));
    
    const config = {
        host: '35.184.206.243',
        user: 'root',
        password: 'Neves2025@',
        database: 'reuni-dep',
        port: 3306,
        ssl: { rejectUnauthorized: false }
    };
    
    try {
        const connection = await mysql.createConnection(config);
        console.log('‚úÖ Conectado √† nova inst√¢ncia!');
        
        // 1. Criar tabela users
        console.log('\nüìã Criando tabela users...');
        await connection.query(`CREATE TABLE IF NOT EXISTS users (
            id INT PRIMARY KEY AUTO_INCREMENT,
            name VARCHAR(255) NOT NULL,
            email VARCHAR(255) UNIQUE NOT NULL,
            password VARCHAR(255) NOT NULL,
            role ENUM('admin', 'user', 'manager') DEFAULT 'user',
            google_id VARCHAR(255),
            created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
            updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP
        )`);
        console.log('‚úÖ Tabela users criada');
        
        // 2. Criar tabela rooms
        console.log('\nüè¢ Criando tabela rooms...');
        await connection.query(`CREATE TABLE IF NOT EXISTS rooms (
            id INT PRIMARY KEY AUTO_INCREMENT,
            name VARCHAR(255) NOT NULL,
            capacity INT NOT NULL DEFAULT 10,
            equipment TEXT,
            description TEXT,
            is_active BOOLEAN DEFAULT TRUE,
            created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
            updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP
        )`);
        console.log('‚úÖ Tabela rooms criada');
        
        // 3. Criar tabela bookings
        console.log('\nüìÖ Criando tabela bookings...');
        await connection.query(`CREATE TABLE IF NOT EXISTS bookings (
            id INT PRIMARY KEY AUTO_INCREMENT,
            title VARCHAR(255) NOT NULL,
            description TEXT,
            room_id INT NOT NULL,
            user_id INT NOT NULL,
            start_time DATETIME NOT NULL,
            end_time DATETIME NOT NULL,
            status ENUM('pending', 'confirmed', 'cancelled') DEFAULT 'confirmed',
            organizer VARCHAR(255),
            organizer_name VARCHAR(255),
            participants TEXT,
            equipment TEXT,
            notes TEXT,
            created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
            updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
            FOREIGN KEY (room_id) REFERENCES rooms(id),
            FOREIGN KEY (user_id) REFERENCES users(id)
        )`);
        console.log('‚úÖ Tabela bookings criada');
        
        // 4. Criar √≠ndices
        console.log('\nüìä Criando √≠ndices para performance...');
        const indices = [
            'CREATE INDEX IF NOT EXISTS idx_bookings_room_time ON bookings(room_id, start_time, end_time)',
            'CREATE INDEX IF NOT EXISTS idx_bookings_user ON bookings(user_id)',
            'CREATE INDEX IF NOT EXISTS idx_bookings_status ON bookings(status)',
            'CREATE INDEX IF NOT EXISTS idx_users_email ON users(email)',
            'CREATE INDEX IF NOT EXISTS idx_users_google_id ON users(google_id)'
        ];
        
        for (const indice of indices) {
            try {
                await connection.query(indice);
                console.log('   ‚úÖ √çndice criado');
            } catch (error) {
                console.log('   ‚ö†Ô∏è  √çndice j√° existe');
            }
        }
        
        // 5. Inserir dados iniciais
        console.log('\nüì¶ Inserindo dados iniciais...');
        
        // Verificar se j√° existem salas
        const [rooms] = await connection.query('SELECT COUNT(*) as total FROM rooms');
        if (rooms[0].total === 0) {
            await connection.query(`INSERT INTO rooms (name, capacity, equipment, description) VALUES
                ('Sala Alpha', 8, 'Projetor, TV 55", Quadro branco', 'Sala ideal para reuni√µes executivas'),
                ('Sala Beta', 12, 'Projetor, Sistema de √°udio, Videoconfer√™ncia', 'Sala para apresenta√ß√µes e treinamentos'),
                ('Sala Gamma', 6, 'TV 42", Quadro branco', 'Sala para reuni√µes pequenas'),
                ('Sala Delta', 15, 'Projetor, Sistema de som, Microfone', 'Audit√≥rio para eventos maiores'),
                ('Sala Omega', 4, 'TV 32", Mesa redonda', 'Sala para reuni√µes √≠ntimas')`);
            console.log('‚úÖ 5 salas inseridas');
        } else {
            console.log('‚ö†Ô∏è  Salas j√° existem, pulando inser√ß√£o');
        }
        
        // Verificar se j√° existe usu√°rio admin
        const [users] = await connection.query('SELECT COUNT(*) as total FROM users WHERE role = "admin"');
        if (users[0].total === 0) {
            // Hash da senha "admin123"
            const hashedPassword = '$2b$10$92IXUNpkjO0rOQ5byMi.Ye4oKoEa3Ro9llC/.og/at2.uheWG/igi';
            await connection.query(`INSERT INTO users (name, email, password, role) VALUES
                ('Administrador', 'admin@reunipro.com', '${hashedPassword}', 'admin')`);
            console.log('‚úÖ Usu√°rio admin criado');
            console.log('   üìß Email: admin@reunipro.com');
            console.log('   üîë Senha: password');
        } else {
            console.log('‚ö†Ô∏è  Usu√°rio admin j√° existe');
        }
        
        // 6. Verifica√ß√£o final
        console.log('\nüîç Verifica√ß√£o final da estrutura...');
        const [finalRooms] = await connection.query('SELECT COUNT(*) as total FROM rooms');
        const [finalUsers] = await connection.query('SELECT COUNT(*) as total FROM users');
        const [finalBookings] = await connection.query('SELECT COUNT(*) as total FROM bookings');
        
        console.log(`   üìä Salas: ${finalRooms[0].total}`);
        console.log(`   üë• Usu√°rios: ${finalUsers[0].total}`);
        console.log(`   üìÖ Reuni√µes: ${finalBookings[0].total}`);
        
        await connection.end();
        
        console.log('\nüéâ ESTRUTURA CRIADA COM SUCESSO NA NOVA INST√ÇNCIA!');
        console.log('\nüöÄ PR√ìXIMOS PASSOS:');
        console.log('1. Testar sistema completo: node testar-sistema-completo.js');
        console.log('2. Atualizar vari√°veis Netlify com nova configura√ß√£o');
        console.log('3. Fazer deploy da nova vers√£o');
        
        return true;
        
    } catch (error) {
        console.error('\n‚ùå ERRO AO CRIAR ESTRUTURA:', error.message);
        console.log('\nüõ†Ô∏è  VERIFICAR:');
        console.log('- Conex√£o com banco');
        console.log('- Permiss√µes do usu√°rio root');
        console.log('- Configura√ß√µes de rede');
        return false;
    }
}

// Executar
criarEstruturaNaNovaInstancia().catch(console.error);
