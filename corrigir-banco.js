// ==================== CORRIGIR BANCO DE DADOS - GOOGLE CLOUD SQL ====================

const { execSync } = require('child_process');

async function corrigirBanco() {
    console.log('üîß === CORRIGINDO CONFIGURA√á√ÉO DO BANCO ===\n');
    
    try {
        // 1. Verificar se gcloud est√° instalado
        console.log('1. üì¶ Verificando Google Cloud CLI...');
        try {
            const gcloudVersion = execSync('gcloud version', { encoding: 'utf8' });
            console.log('‚úÖ Google Cloud CLI encontrado');
        } catch (error) {
            console.log('‚ùå Google Cloud CLI n√£o encontrado');
            console.log('üí° Instale: https://cloud.google.com/sdk/docs/install');
            return;
        }

        // 2. Verificar projeto ativo
        console.log('\n2. üèóÔ∏è Verificando projeto ativo...');
        try {
            const activeProject = execSync('gcloud config get-value project', { encoding: 'utf8' }).trim();
            console.log(`‚úÖ Projeto ativo: ${activeProject}`);
        } catch (error) {
            console.log('‚ùå Nenhum projeto ativo');
            console.log('üí° Configure: gcloud auth login && gcloud config set project SEU_PROJETO');
            return;
        }

        // 3. Listar inst√¢ncias Cloud SQL
        console.log('\n3. üóÑÔ∏è Listando inst√¢ncias Cloud SQL...');
        try {
            const instances = execSync('gcloud sql instances list --format="table(name,region,databaseVersion,tier)"', { encoding: 'utf8' });
            console.log(instances);
        } catch (error) {
            console.log('‚ùå Erro ao listar inst√¢ncias:', error.message);
        }

        // 4. Verificar IP autorizado
        console.log('\n4. üåê Verificando IPs autorizados...');
        try {
            const authorizedNetworks = execSync('gcloud sql instances describe sala-livre-instance --format="value(settings.ipConfiguration.authorizedNetworks[].value)"', { encoding: 'utf8' });
            console.log('üìã IPs autorizados:', authorizedNetworks || 'Nenhum');
        } catch (error) {
            console.log('‚ùå Erro ao verificar IPs:', error.message);
        }

        // 5. Resetar senha do usu√°rio root
        console.log('\n5. üîë Resetando senha root...');
        try {
            const novaSenha = 'Neves2025@';
            execSync(`gcloud sql users set-password root --host=% --instance=sala-livre-instance --password="${novaSenha}"`, { encoding: 'utf8' });
            console.log('‚úÖ Senha root resetada para: Neves2025@');
        } catch (error) {
            console.log('‚ùå Erro ao resetar senha:', error.message);
        }

        // 6. Criar usu√°rio dedicado
        console.log('\n6. üë§ Criando usu√°rio app_user...');
        try {
            const userPassword = 'AppUser2025!';
            execSync(`gcloud sql users create app_user --host=% --instance=sala-livre-instance --password="${userPassword}"`, { encoding: 'utf8' });
            console.log('‚úÖ Usu√°rio app_user criado com senha: AppUser2025!');
        } catch (error) {
            console.log('‚ö†Ô∏è Usu√°rio app_user j√° existe ou erro:', error.message);
        }

        // 7. Autorizar IP atual
        console.log('\n7. üîì Autorizando IP atual...');
        try {
            const response = await fetch('https://api.ipify.org?format=json');
            const { ip } = await response.json();
            console.log(`üìç Seu IP atual: ${ip}`);
            
            execSync(`gcloud sql instances patch sala-livre-instance --authorized-networks="${ip}/32"`, { encoding: 'utf8' });
            console.log(`‚úÖ IP ${ip} autorizado`);
        } catch (error) {
            console.log('‚ùå Erro ao autorizar IP:', error.message);
        }

        // 8. Obter IP da inst√¢ncia
        console.log('\n8. üìç Obtendo IP da inst√¢ncia...');
        try {
            const instanceIP = execSync('gcloud sql instances describe sala-livre-instance --format="value(ipAddresses[0].ipAddress)"', { encoding: 'utf8' }).trim();
            console.log(`‚úÖ IP da inst√¢ncia: ${instanceIP}`);
        } catch (error) {
            console.log('‚ùå Erro ao obter IP:', error.message);
        }

        console.log('\nüéâ === CONFIGURA√á√ÉO CONCLU√çDA ===');
        console.log('üìã Resumo das credenciais:');
        console.log('- Host: 35.184.206.243 (ou o IP mostrado acima)');
        console.log('- User: root');
        console.log('- Password: Neves2025@');
        console.log('- Database: reuni-dep');
        console.log('\nüí° Agora teste a conex√£o novamente!');

    } catch (error) {
        console.error('üí• Erro geral:', error);
    }
}

// Executar se chamado diretamente
if (require.main === module) {
    corrigirBanco();
}

module.exports = { corrigirBanco };
