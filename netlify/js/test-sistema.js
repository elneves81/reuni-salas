// ==================== TESTE R√ÅPIDO DO SISTEMA ====================

// Fun√ß√£o para testar se tudo est√° funcionando
async function testeRapidoSistema() {
    console.log('üß™ === TESTE R√ÅPIDO DO SISTEMA ===');
    
    // 1. Verificar se API est√° carregada
    console.log('1. Verificando API...');
    if (window.salaLivreAPI) {
        console.log('‚úÖ API Client carregada');
        
        // Verificar se est√° autenticada
        if (window.salaLivreAPI.isAuthenticated()) {
            console.log('‚úÖ Usu√°rio autenticado');
            
            const usuario = window.salaLivreAPI.getCurrentUser();
            console.log('üë§ Usu√°rio atual:', usuario.name, '- Role:', usuario.role);
            
            // Verificar se √© admin
            if (window.salaLivreAPI.isAdmin()) {
                console.log('üëë Usu√°rio √© ADMIN - pode gerenciar usu√°rios');
            } else {
                console.log('üë§ Usu√°rio √© ' + usuario.role + ' - sem permiss√µes admin');
            }
        } else {
            console.log('üîí Usu√°rio n√£o autenticado');
        }
    } else {
        console.log('‚ùå API Client n√£o carregada');
    }
    
    // 2. Verificar gerenciamento de usu√°rios
    console.log('2. Verificando gerenciamento de usu√°rios...');
    if (window.userManagementAPI) {
        console.log('‚úÖ Sistema de gerenciamento de usu√°rios carregado');
    } else {
        console.log('‚ùå Sistema de gerenciamento de usu√°rios n√£o carregado');
    }
    
    // 3. Verificar sistema de notifica√ß√µes
    console.log('3. Verificando sistema de notifica√ß√µes...');
    if (window.notificationSystem) {
        console.log('‚úÖ Sistema de notifica√ß√µes carregado');
        // Enviar notifica√ß√£o teste
        window.notificationSystem.addNotification('info', 'Teste', 'Sistema funcionando perfeitamente! üéâ');
    } else {
        console.log('‚ùå Sistema de notifica√ß√µes n√£o carregado');
    }
    
    // 4. Verificar calend√°rio (com aguardar)
    console.log('4. Verificando calend√°rio...');
    await waitForCalendar();
    
    console.log('üß™ === FIM DO TESTE ===');
}

// Fun√ß√£o para aguardar o calend√°rio estar pronto
async function waitForCalendar(maxTries = 5) {
    for (let i = 0; i < maxTries; i++) {
        if (window.calendar && typeof window.calendar.getEvents === 'function') {
            console.log('‚úÖ Calend√°rio FullCalendar inicializado');
            try {
                const eventos = window.calendar.getEvents();
                console.log('üìÖ Eventos no calend√°rio:', eventos.length);
                return;
            } catch (error) {
                console.log('‚ö†Ô∏è Erro ao obter eventos:', error.message);
            }
        }
        
        console.log(`‚è≥ Aguardando calend√°rio... (tentativa ${i + 1}/${maxTries})`);
        await new Promise(resolve => setTimeout(resolve, 1000));
    }
    
    console.log('‚ùå Calend√°rio n√£o ficou dispon√≠vel ap√≥s aguardar');
}

// Executar teste quando p√°gina carregar
document.addEventListener('DOMContentLoaded', () => {
    // Aguardar um pouco para todos os scripts carregarem
    setTimeout(testeRapidoSistema, 3000);
});

// Tornar fun√ß√£o dispon√≠vel globalmente para teste manual
window.testeRapidoSistema = testeRapidoSistema;
window.waitForCalendar = waitForCalendar;

console.log('üß™ Teste do sistema carregado! Execute testeRapidoSistema() para verificar.');
